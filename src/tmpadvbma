use std::sync::{Arc, Mutex};
use std::thread;
use std::sync::mpsc::channel;
use std::sync::mpsc::Sender;
use std::sync::mpsc::Receiver;
use std::collections::HashMap;
use std::time::Duration;
const numPollers: i32 = 10;
const pollInterval: i32 = 60;
const statusInterval: i32 = 10;
const errTimeout: i32 = 10;
struct Resource {
    url: String,
    errCount: i32,
}

struct State {
    url: String,
    status: &'static str,
}



impl Resource {
    fn Poll(&self) -> &'static str{
        self.errCount = 0;
        return "200 OK";
    }

    fn Sleep(&self, pendingTx: Sender<Resource>) {
        let sleepTime = Duration::new(60, 0);
        thread::sleep(sleepTime);
        pendingTx.send(*self);
    }
}

fn StateMonitor() -> Sender<State>{
    let (updatesTx, updatesRx) = channel::<State>();
    let mut urlStatus = HashMap::new();
    thread::spawn(|| {
        for s in updatesRx.iter() {
            urlStatus.insert(s.url, s.status);
        }
    });

    return updatesTx;
}


fn Poller(pendingRx: Receiver<Resource>,
          completeTx: Sender<Resource>,
          status: Sender<State>) {
    for r in pendingRx.iter() {
        let s = r.Poll();
        let st = State{r.url,a};
        status.send(s);
        completeTx.send(r);
    }
}
fn main() {
    let urls = vec!["http://www.google.com/", "http://golang.org/", "http://blog.golang.org/"];
    let (pendingTx, pendingRx) = channel::<Resource>();
    let (completeTx, completeRx) = channel::<Resource>();
    let status = StateMonitor();
    for i in 0..numPollers {
        thread::spawn(Poller(pendingRx, completeTx, status));
    }

    thread::spawn(|| {
        for url in urls.enumerate() {
            let r = &Resource { url: url };
            pendingTx.send(r);
        }
    });

    for r in completeRx.iter() {
        thread::spawn(|| {
            r.sleep(pendingTx);
        });
    }
}
