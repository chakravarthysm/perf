use std::sync::{Arc, Mutex};
use std::thread;
use std::sync::mpsc::channel;
use std::collections::HashMap;
use std::time::Duration;
const numPollers: i32 = 10;
const pollInterval: i32 = 60;
const statusInterval: i32 = 10;
const errTimeout: i32 = 10;
struct Resource {
    url: String,
    errCount: i32,
}

struct State {
    url: String,
    status: String,
}

let urls = vec!["http://www.google.com/",
	"http://golang.org/",
	"http://blog.golang.org/"];

impl Resource {
    fn Poll(&self) {
    	Resource.errCount=0;
    	return "200 OK"
    }

    fn Sleep(&self) {
    	let sleepTime = Duration.new(60,0);
        thread::sleep(sleepTime);
    }
}

fn StateMonitor(){
    let (updatesTx, updatesRx) = channel::<State>();
    let mut urlStatus = HashMap::new();
    thread::spawn(|| {
        for s in updatesRx.iter() {
            urlStatus.insert(s.url, s.status);
        }
    });

    return updatesTx
}


fn Poller(pendingRx:channel::Reciever<Resource>,completeTx) {
    for r in pendingRx.iter() {
      let s = r.Poll();
       status.send(s);
    }
}
fn main() {
   
    let (pendingTx, pendingRx) = channel::<Resource>();
     let (completeTx, completeRx) = channel::<Resource>();
     status = StateMonitor();
    for i in 0..numPollers {
        thread::spawn(Poller(pendingRx, completeTx, status));
    }

    thread.spawn(||{
       for i in urls.enumerate(){
       	    pedm
       }
    });

    for r in complete.iter(){
    	thread.spawn(||{
           r.
    	});
    }
}
